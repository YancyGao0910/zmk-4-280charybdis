name: Build and Release ZMK Firmware
on:
  push:
    branches:
      - main
    tags:
      - 'v1.0.1'
  workflow_dispatch:

jobs:
# ──────────────────────────────────────────────────────────────
#  SET-UP read build.yaml & save matrix JSON as groups
# ──────────────────────────────────────────────────────────────
  build-matrix:
    name: Build Matrix
    runs-on: ubuntu-latest
    outputs:
      groups: ${{ steps.make-groups.outputs.groups }}

    env:
      # repo-local bin dir for tools; ends up on $PATH
      LOCAL_BIN_DIR: ${{ github.workspace }}/.bin
      YQ_VERSION: v4.44.3
      JQ_VERSION: jq-1.7.1

    steps:
      - name: Checkout repo (no submodules)
        uses: actions/checkout@v4

      - name: Install yq + jq (version-pinned, repo-local)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$LOCAL_BIN_DIR"
          echo "$LOCAL_BIN_DIR" >> "$GITHUB_PATH"

          # yq
          if [ ! -x "$LOCAL_BIN_DIR/yq" ]; then
            echo "Installing yq $YQ_VERSION..."
            curl -fsSL "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64" -o "$LOCAL_BIN_DIR/yq"
            chmod 0755 "$LOCAL_BIN_DIR/yq"
          else
            echo "yq already installed at $("$LOCAL_BIN_DIR/yq" --version)"
          fi

          # jq
          if [ ! -x "$LOCAL_BIN_DIR/jq" ]; then
            echo "Installing jq $JQ_VERSION..."
            curl -fsSL "https://github.com/jqlang/jq/releases/download/${JQ_VERSION}/jq-linux-amd64" -o "$LOCAL_BIN_DIR/jq"
            chmod 0755 "$LOCAL_BIN_DIR/jq"
          else
            echo "jq already installed at $("$LOCAL_BIN_DIR/jq" --version)"
          fi

      - id: make-groups
        name: Build matrix from build.yaml
        shell: bash
        run: |
          set -euo pipefail
          test -f build.yaml || { echo "build.yaml not found at repo root"; exit 1; }

          # Read .include list > JSON; add defaults; keep any extra fields you add per-entry
          groups_json=$(
            yq -o=json '.include' build.yaml | \
            jq -c '
              map(
                . as $r
                | ($r.shield | (if type=="array" then . else [.] end)) as $shields
                | (if has("keymap") then ($r.keymap | (if type=="array" then . else [.] end)) else [null] end) as $keymaps
                | [ range(0; ($shields|length)) as $i
                    | range(0; ($keymaps|length)) as $j
                    | { board:  $r.board
                      , shield: $shields[$i]
                      , keymap: $keymaps[$j]        # may be null for reset
                      , snippet: ($r.snippet // null)
                      , name:   ($r.name // (
                                  ($r.board|tostring) + "-" +
                                  ($shields[$i]|tostring) +
                                  (if $keymaps[$j] then "-" + ($keymaps[$j]|tostring) else "" end)
                                ))
                      , format: ($r.format // "uf2")
                    }
                  ]
                ]
              ) | add
            '
          )

          # Expose for downstream jobs
          echo "groups=${groups_json}" >> "$GITHUB_OUTPUT"

          echo "Build Matrix Created:"
          echo "$groups_json" | jq .

# ──────────────────────────────────────────────────────────────
#  BUILD
# ──────────────────────────────────────────────────────────────
  build:
    name: Build (${{ matrix.group.name }})
    needs: build-matrix
    runs-on: ubuntu-latest
    container: zmkfirmware/zmk-build-arm:stable

    strategy:
      fail-fast: false
      matrix:
        group: ${{ fromJson(needs.build-matrix.outputs.groups) }}

    steps:
    # - name: Install tree
    #   run: apt-get update && apt-get install -y tree

    # ───────── checkout user config (this repo) ─────────
    - name: Checkout zmk-config repo
      uses: actions/checkout@v4

    - name: Initialise West workspace
      shell: bash
      run: |
        set -euxo pipefail
        echo "Initializing the west workspace using local manifest at config/west.yml"
        west init -l "$GITHUB_WORKSPACE/config"
        west update
        echo "Exporting Zephyr for external build system integration."
        west zephyr-export

        # # ───────── DEBUG LOGS ─────────
        # echo ""
        # echo "Debug Logs"
        # echo "Top dir  : $(west topdir)"
        # echo "Projects :"
        # ls -1 $(west topdir)     # you'll see zmk, zephyr, modules/ …
        # echo "West workspace ready. Project structure:"
        # west list

    # ───────── verify keymaps under config/keymaps/ ─────────
    - name: Verify requested keymap exists
      if: ${{ matrix.group.keymap && matrix.group.keymap != '' }}
      shell: bash
      run: |
        set -euo pipefail
        f="config/keymaps/${{ matrix.group.keymap }}.keymap"
        test -f "$f" || { echo "[ERROR] Missing keymap file: $f"; exit 1; }
        echo "Found $f"

    # ───────── Build ─────────
    - name: Build ${{ matrix.group.name }}
      shell: bash
      working-directory: zmk/app
      run: |
        set -euo pipefail

        KM="${{ matrix.group.keymap }}"
        FM="${{ matrix.group.format }}"   # artifact format (e.g., uf2)
        NM="${{ matrix.group.name }}"
        BD="${{ matrix.group.board }}"    # e.g., nice_nano_v2
        SH="${{ matrix.group.shield }}"   # e.g., charybdis_right or charybdis_dongle

        mkdir -p "$GITHUB_WORKSPACE/out/$NM"
        CONFIG_DIR="$GITHUB_WORKSPACE/config"
        
        BUILD_DIR=$(mktemp -d)

        # snippet: explicit from matrix wins; else auto for right-half (non-dongle)
        if [[ -n "${{ matrix.group.snippet || '' }}" ]]; then
          SNIPPET_OPTION="-DSNIPPET=${{ matrix.group.snippet }}"
        elif [[ "$SH" == *right* && "$SH" != *dongle* ]]; then
          SNIPPET_OPTION="-DSNIPPET=studio-rpc-usb-uart"
        else
          SNIPPET_OPTION=""
        fi

        # keymap option only if present
        if [[ -n "${KM:-}" ]]; then
          KEYMAP_OPTION="-DKEYMAP=$KM"
        else
          KEYMAP_OPTION=""
        fi

        echo "Build vars"
        echo "→ Keymap (KM): $KM"
        echo "→ Format (FM): $FM"
        echo "→ Name   (NM): $NM"
        echo "→ Board  (BD): $BD"
        echo "→ Shield (SH): $SH"
        echo "→ Dir        : $(pwd)"
        echo "→ Snippet    : $SNIPPET_OPTION"
        echo "→ Build dir  : $BUILD_DIR"

        # ──────────────────────────────────────────────────────────────
        echo "west build…"
        west build -p \
          -d "$BUILD_DIR" \
          -b "$BD" \
          -- \
          "-DZMK_CONFIG=$CONFIG_DIR" \
          "-DZEPHYR_EXTRA_MODULES=$GITHUB_WORKSPACE" \
          "-DSHIELD=$SH" \
          "-DKEYMAP=$KM" \
          "$KEYMAP_OPTION" \
          "$SNIPPET_OPTION"
        # ──────────────────────────────────────────────────────────────

        ART=$(if [[ -f "$BUILD_DIR/zephyr/zmk.uf2" ]]; then echo zmk.uf2; else echo zmk.bin; fi)
        mkdir -p "$GITHUB_WORKSPACE/out/$NM"
        cp "$BUILD_DIR/zephyr/$ART" "$GITHUB_WORKSPACE/out/$NM/$SH.${ART##*.}"

    - name: Upload firmware bundle
      uses: actions/upload-artifact@v4
      with:
        name: charybdis-${{ matrix.group.name }}
        path: ${{ github.workspace }}/out/${{ matrix.group.name }}/**

# ──────────────────────────────────────────────────────────────
#  RELEASE - zip files to add to release
# ──────────────────────────────────────────────────────────────
  release-firmware:
    name: Release Firmware
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions: { contents: write }

    steps:
    - uses: actions/download-artifact@v4
      with: { path: combo-artifacts/ }

    - name: Zip each combo
      working-directory: combo-artifacts
      run: |
        for d in */; do
          zip -j "${d%/}.zip" "$d"*
        done

    - uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Firmware Release ${{ github.ref_name }}
        files: combo-artifacts/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}