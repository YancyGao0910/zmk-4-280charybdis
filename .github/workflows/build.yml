name: Build and Release ZMK Firmware
on:
  push:
    branches:
      - main
    tags:
      - 'v1.0.1'
  workflow_dispatch:

jobs:
# ──────────────────────────────────────────────────────────────
#  SET-UP build-matrix + keymaps
# ──────────────────────────────────────────────────────────────
  setup:
    runs-on: ubuntu-latest
    outputs:
      groups: ${{ steps.build-matrix.outputs.groups }}

    steps:
    - name: Checkout repo (no submodules)
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with: { python-version: "3.x" }

    - name: OS deps
      run: sudo apt-get update && sudo apt-get install -y jq

    # - name: Generate extra keymaps
    #   run: |
    #     echo "⚙️ Generating additional keymaps"
    #     mv config/keymap/charybdis.keymap config/keymap/qwerty.keymap

    - name: Generate build matrix
      id: build-matrix
      run: |
        matrix=$(yq -oj '.' build.yaml | python - <<'PY'
import json, sys


def as_list(value):
    if value is None:
        return []
    if isinstance(value, list):
        return value
    return [value]


data = json.load(sys.stdin)
defaults = as_list(data.get("board"))
result = []

for entry in data.get("include", []):
    if not isinstance(entry, dict):
        continue

    name = entry.get("name") or entry.get("format") or "custom"
    fmt = entry.get("format") or name
    boards = as_list(entry.get("board")) or defaults
    if not boards:
        raise SystemExit(f"Entry '{name}' is missing a board")

    shields = as_list(entry.get("shield") or entry.get("shields"))
    if not shields:
        raise SystemExit(f"Entry '{name}' is missing a shield list")

    keymaps = as_list(entry.get("keymap") or entry.get("keymaps")) or [""]
    snippets = as_list(entry.get("snippet") or entry.get("snippets"))
    cmake_args = as_list(entry.get("cmake-args"))
    artifact_prefix = entry.get("artifact-name") or entry.get("artifact-prefix") or ""

    for board in boards:
        for keymap in keymaps:
            keymap_str = keymap or ""
            display = name if not keymap_str else f"{name}-{keymap_str}"
            result.append(
                {
                    "name": display,
                    "entry": name,
                    "format": fmt,
                    "board": board,
                    "keymap": keymap_str,
                    "shields": shields,
                    "snippets": snippets,
                    "cmake_args": cmake_args,
                    "artifact_prefix": artifact_prefix,
                }
            )

print(json.dumps(result))
PY
        )
        echo "groups=$matrix" >>"$GITHUB_OUTPUT"
        echo "⚙️ Build Matrix Created"
        echo "$matrix" | jq .

# ──────────────────────────────────────────────────────────────
#  BUILD
# ──────────────────────────────────────────────────────────────
  build:
    name: Build (${{ matrix.combo.name }})
    needs: setup
    runs-on: ubuntu-latest
    container: zmkfirmware/zmk-build-arm:stable

    strategy:
      fail-fast: false
      matrix:
        combo: ${{ fromJson(needs.setup.outputs.groups) }}

    steps:
    - name: Install build helpers
      run: apt-get update && apt-get install -y jq tree

    # ───────── update zmk sub-repo ─────────
    - name: Checkout workflow repo
      uses: actions/checkout@v4

    - name: Initialise West workspace
      shell: bash
      run: |
        set -euxo pipefail
        echo "✨ Initializing the west workspace with the local manifest from config/west.yml."
        west init -l --mf $GITHUB_WORKSPACE/config/west.yml "$GITHUB_WORKSPACE/config"
        echo "🔄 Updating and synchronizing all repositories in the workspace."
        west update
        echo "📦 Exporting Zephyr for external build system integration."
        west zephyr-export

        # ───────── DEBUG LOGS ─────────
        echo ""
        echo "🪳 Debug Logs"
        echo "👀 Top dir  : $(west topdir)"
        echo "👀 Projects :"
        ls -1 $(west topdir)     # you'll see zmk, zephyr, modules/ …
        echo "👀 West workspace ready. Project structure:"
        west list

    # ───────── stage keymaps and helper files ─────────
    - name: Stage keymaps and helper overlays
      shell: bash
      env:
        KEYMAP: ${{ matrix.combo.keymap }}
      run: |
        set -euo pipefail
        mkdir -p zmk/app/overlays
        rm -f zmk/app/overlays/charybdis.keymap

        if [[ -n "$KEYMAP" ]]; then
          KEYMAP_PATH="config/keymaps/$KEYMAP.keymap"
          if [[ ! -f "$KEYMAP_PATH" ]]; then
            echo "Missing keymap file: $KEYMAP_PATH" >&2
            exit 1
          fi
          cp "$KEYMAP_PATH" zmk/app/overlays/charybdis.keymap
        fi

        cp config/*.dtsi zmk/app/overlays/ 2>/dev/null || true
        cp config/keymap_features/*.dtsi zmk/app/overlays/ 2>/dev/null || true
        cp config/trackball/*.dtsi zmk/app/overlays/ 2>/dev/null || true

    # ───────── Inject custom shields & helper DTSI files ─────────
    - name: Inject custom shields & helper files
      if: ${{ matrix.combo.entry != 'settings_reset' }}
      shell: bash
      run: |
        ZMK_SHIELDS_DIR="$GITHUB_WORKSPACE/zmk/app/boards/shields"
        mkdir -p "$ZMK_SHIELDS_DIR"
        cp -r boards/shields/* "$ZMK_SHIELDS_DIR/"

        shopt -s nullglob
        for d in "$ZMK_SHIELDS_DIR"/charybdis_*; do
          [[ -d "$d" ]] || continue
          for f in config/charybdis-layouts.dtsi config/charybdis_pmw3610.dtsi config/charybdis_pointer.dtsi config/trackball/charybdis_pointer.dtsi; do
            [[ -f "$f" ]] || continue
            cp "$f" "$d/"
          done
        done
        shopt -u nullglob

    # ───────── Build ─────────
    - name: Build combo ${{ matrix.combo.name }}
      shell: bash
      working-directory: zmk/app
      env:
        BOARD: ${{ matrix.combo.board }}
        COMBO_NAME: ${{ matrix.combo.name }}
        ENTRY_NAME: ${{ matrix.combo.entry }}
        KEYMAP: ${{ matrix.combo.keymap }}
        SHIELDS_JSON: ${{ toJson(matrix.combo.shields) }}
        SNIPPETS_JSON: ${{ toJson(matrix.combo.snippets) }}
        CMAKE_ARGS_JSON: ${{ toJson(matrix.combo.cmake_args) }}
        ARTIFACT_PREFIX: ${{ matrix.combo.artifact_prefix }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
      run: |
        set -euo pipefail

        OUT_DIR="$GITHUB_WORKSPACE/out/$COMBO_NAME"
        mkdir -p "$OUT_DIR"

        mapfile -t SHIELDS < <(jq -r '.[]' <<< "$SHIELDS_JSON")
        mapfile -t SNIPPETS < <(jq -r '.[]' <<< "$SNIPPETS_JSON")
        mapfile -t EXTRA_ARGS < <(jq -r '.[]' <<< "$CMAKE_ARGS_JSON")

        if [[ ${#SHIELDS[@]} -eq 0 ]]; then
          echo "No shields defined for $COMBO_NAME" >&2
          exit 1
        fi

        for shield in "${SHIELDS[@]}"; do
          build_dir=$(mktemp -d)
          cmd=(west build -p -d "$build_dir" -b "$BOARD")

          for snippet in "${SNIPPETS[@]}"; do
            [[ -n "$snippet" ]] || continue
            cmd+=(-S "$snippet")
          done

          cmd+=(-- "-DZMK_CONFIG=$GITHUB_WORKSPACE/config" "-DSHIELD=$shield")

          if [[ -n "$KEYMAP" ]]; then
            cmd+=("-DKEYMAP_FILE=overlays/charybdis.keymap")
          fi

          for arg in "${EXTRA_ARGS[@]}"; do
            [[ -n "$arg" ]] || continue
            cmd+=("$arg")
          done

          echo "\n🛠 Building $shield ($COMBO_NAME)"
          printf '→ Command: %s\n' "${cmd[*]}"
          "${cmd[@]}"

          artifact=""
          if [[ -f "$build_dir/zephyr/zmk.uf2" ]]; then
            artifact="$build_dir/zephyr/zmk.uf2"
          elif [[ -f "$build_dir/zephyr/zmk.bin" ]]; then
            artifact="$build_dir/zephyr/zmk.bin"
          else
            echo "No firmware artifact produced for $shield" >&2
            exit 1
          fi

          extension="${artifact##*.}"
          base_name="${shield##*/}"
          if [[ -n "$ARTIFACT_PREFIX" ]]; then
            base_name="$ARTIFACT_PREFIX-$base_name"
          fi

          cp "$artifact" "$OUT_DIR/$base_name.$extension"
          echo "✅ Saved $COMBO_NAME/$base_name.$extension"
        done

    - name: Upload firmware bundle
      uses: actions/upload-artifact@v4
      with:
        name: charybdis-${{ matrix.combo.name }}
        path: ${{ github.workspace }}/out/${{ matrix.combo.name }}/**

# ──────────────────────────────────────────────────────────────
#  RELEASE - zip files to add to release
# ──────────────────────────────────────────────────────────────
  release-firmware:
    name: Release Firmware
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions: { contents: write }

    steps:
    - uses: actions/download-artifact@v4
      with: { path: combo-artifacts/ }

    - name: Zip each combo
      working-directory: combo-artifacts
      run: |
        for d in */; do
          zip -j "${d%/}.zip" "$d"*
        done

    - uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Firmware Release ${{ github.ref_name }}
        files: combo-artifacts/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
